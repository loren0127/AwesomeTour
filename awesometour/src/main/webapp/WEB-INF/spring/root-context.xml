<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">
	
	
	<!-- 스케쥴러파일이 존재하는 패키지 설정 --> 
	<context:component-scan base-package="com.crontab" /> 
	<!-- 해당 태그들은 크론탭을 설정에 필요한 태그들 -->
	 <task:scheduler id="jobScheduler" pool-size="10" />
	  <task:annotation-driven scheduler="jobScheduler" />

	
	<!-- 빈 자동 스캔 
	: servlet-context.xml에서 Controller 자동 스캔을 설정했기 때문에 아래 설정에서는 Controller는 자동 스캔 대상에서 제외시킨다. 
	-->
	<context:component-scan base-package="kr.spring">
		<!-- 자동 스캔 제외 필터 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- JDBC 기반 트랜잭션 관리자 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>
	
	<!-- 데이터베이스 연동 -->
	<context:property-placeholder location="classpath:config/jdbc.properties"/>
	
	<!-- 커넥션 풀을 이용한 DataSource 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/> 
		<property name="password" value="${jdbc.password}"/>
		<!-- 최대 커넥션 개수 -->
		<property name="maxActive" value="50"/>
		<!-- 접속이 없을 경우 최대 유지 커넥션 개수 -->
		<property name="maxIdle" value="30"/>
		<!-- 최대 대기시간(초) : 초과시 연결 실패 오류 발생 -->
		<property name="maxWait" value="5"/>       
	</bean>
	
	<!-- 선언적 트랜잭션 처리 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 아래 속성 태그를 통해 어느 메소드에 트랜잭션을 적용할 것인지 선택할 수 있다. -->
		<tx:attributes>
			<!-- 검색할 수 있는 범위를 *ServiceImpl 클래스로 한정시킴(아래로 가기) -->
			<tx:method name="insert*"/><!-- insert메소드와 insertDetail 메소드 둘 다 적용 -->
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="select*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- tx:method의 속성 
	속성이름			설명
	name				트랜잭션이 적용될 메소드 이름을 명시
						*을 사용한 설정이 가능
						예를 들어 "get*"으로 설정할 경우 이름이 get으로 시작하는 메소드를 의미
						"*get"은 인정되지 않는다.
						
	propagation			(주의)트랜잭션 전파 규칙을 설정(트랜잭션을 시작하거나 기존 트랜잭션에 참여하는 방법을 결정하는 속성)
	isolation			(주의)트랜잭션 격리 레벨을 설정
	read-only			읽기전용 여부를 설정
	no-rollback-for		트랜잭션을 롤백하지 않을 예외 타입 설정
	rollback-for		트랜잭션을 롤백할 예외 타입을 설정
	timeout				트랜잭션의 제한시간을 초단위로 설정
	-->
	
	<!-- AOP 설정 
	완성된 <tx:advice>를 <aop:config>에 주입하면 스프링의 자동 프록시(proxy: 대리(인)) 생성기가 어드바이저 단위로 검색해서 AOP를 적용
	-->
	<aop:config>
		<!-- 실제 Advice가 적용되는 Joinpoint가 Pointcut -->
								<!-- 표현식 : 핵심 기능 검색 -->
		<aop:pointcut expression="execution(public * kr.spring..*ServiceImpl.*(..))" id="servicePublicMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePublicMethod"/>
		<!-- Advisor : 포인트컷과 어드바이스를 하나씩 갖고 있는 오브젝트. AOP의 가장 기본이 되는 모듈 -->
	</aop:config>
	
	<!-- mybatis 설정 : 스프링과 연동하려면 mybatis에서 제공해주는 API를 사용 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- value값으로 명시된 패키지 아래의 모든 클래스를 스캔해서 빈 객체를 생성하고 자동 알리아스를 준다. 첫 글자가 소문자 -->
																		<!-- 쉼표로 나열해서 추가 -->
		<property name="typeAliasesPackage" value="kr.spring.accom.domain,kr.spring.member.domain,kr.spring.group.domain,kr.spring.accomList.domain,kr.spring.admin.domain,kr.spring.reservation.domain,kr.spring.chat.domain,kr.spring.mypage.domain"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
									<!-- value값으로 명시된 패키지 안에서 mapper를 찾는다. 
									(대박)myBatis는 내부에서 인터페이스를 인식해서 자동으로 클래스를 만들고 추상메소드를 구현한다.
									-->
															<!-- 쉼표로 나열해서 추가 -->
		<property name="basePackage" value="kr.spring.accom.dao,kr.spring.member.dao,kr.spring.group.dao,kr.spring.accomList.dao,kr.spring.admin.dao,kr.spring.reservation.dao,kr.spring.chat.dao,kr.spring.mypage.dao"/>
		
	</bean>
	 <!-- 메일보내기 -->
	<bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="ghcks3916@gmail.com" />
      <property name="password" value="cks0108662" />
      <property name="javaMailProperties">
         <props>
               <prop key="mail.transport.protocol">smtp</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.starttls.enable">true</prop>
               <prop key="mail.debug">true</prop>
         </props>
      </property>
   </bean>
</beans>
