<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 식별자라서 여러 개의 mapper를 만들었을 때 구별하기 위해 유니크 해야 함 -->
<mapper namespace="kr.spring.accom.dao.AccomMapper">
	<!-- 
	id : myBatis에서 제공하는 메소드가 받는 식별자로 DAO가 SQL문을 받을 수 있게 해준다.
		 단, 어노테이션 방식으로 myBatis가 설정되었을 경우 id와 메소드명이 일치하면 해당 메소드로 자동 인식
	parameterType : 인자로 전달되는 데이터의 타입
	resultType : 한 건의 데이터를 자바빈에 담는다. (List라고 명시하면 SQL문에 의해 데이터가 처리되기 전 상태라 객체가 비어있어서 예외 발생)
	-->
	<select id="selectList" parameterType="java.util.Map" resultType="AccomCommand">
	SELECT price.*, auth.member_auth, service.se_name, grade.ag_grade,
	review.review_count, book.rv_start_date, book.rv_end_date FROM (SELECT
	* FROM ((SELECT * FROM accom)a) JOIN
	(SELECT * FROM (SELECT ROW_NUMBER() OVER(PARTITION BY ro_acc_num ORDER BY
	MIN(ro_price)) row_num, ro_acc_num, MIN(ro_price) ro_price, ro_num,
	ro_sub, ro_pe_count FROM accom_room
	GROUP BY ro_acc_num, ro_num, ro_sub, ro_pe_count) WHERE row_num = 1)b ON
	a.acc_num = b.ro_acc_num ORDER BY b.ro_price)price RIGHT OUTER JOIN
	(SELECT member_auth, member_email FROM member_auth WHERE member_auth >=
	2)auth ON price.acc_host = auth.member_email RIGHT OUTER JOIN
	(SELECT se_acc_num, se_name FROM accom_service)service ON price.acc_num =
	service.se_acc_num LEFT OUTER JOIN
	(SELECT a.*, b.ag_grade FROM ((SELECT * FROM accom)a) JOIN (SELECT ag_acc_num,
	ROUND(AVG(ag_grade), 1)ag_grade FROM accom_grade
	GROUP BY ag_acc_num)b ON a.acc_num = b.ag_acc_num)grade ON price.acc_num =
	grade.acc_num LEFT OUTER JOIN
	(SELECT a.*, b.review_count FROM ((SELECT * FROM accom)a) JOIN (SELECT
	re_acc_num, COUNT(*)review_count FROM accom_review GROUP BY
	re_acc_num)b ON a.acc_num = b.re_acc_num)review
	ON grade.acc_num = review.acc_num LEFT OUTER JOIN (SELECT member_email,
	rv_start_date, rv_end_date FROM reservation WHERE rv_start_date IS
	NULL)book
	ON price.acc_host = book.member_email 
		<where>
			<!-- 
			orderby는 컨트롤러에서 메소드 파라미터명
			recommend, rating, minimum은 accomList페이지에서 option태그의 value값
			 -->
			<if test="orderby == 'rating'">
				grade.ag_grade is not null
			</if>
			<if test="orderby == 'recommend'">
				auth.MEMBER_AUTH = 3
			</if>
			<if test="orderby == 'hotelGrade'">
				<![CDATA[
					price.acc_grade >= 4
				]]>
			</if>
			<if test="orderby == 'relax'">
				price.acc_theme LIKE '%조용%' OR price.acc_theme LIKE '%편안%'
			</if>
			<if test="orderby == 'luxury'">
				price.acc_theme LIKE '%럭셔리%' 
			</if>
			<if test="orderby == 'business'">
				price.acc_theme LIKE '%비지니스%' 
			</if>
			<if test="orderby == 'party'">
				price.acc_theme LIKE '%파티%' 
			</if>
			<if test="check_in != '' and check_out != '' and orderby != ''">
				AND
			</if>
			<if test="check_in != '' and check_out != '' and people_count != '' and people_count >= 1">
				<![CDATA[
					price.ro_pe_count >= 1 AND price.ro_pe_count <= 8 AND price.ro_num NOT IN 
					(SELECT ro_num FROM reservation WHERE TO_DATE(rv_end_date,'yyyy/mm/dd') > #{check_in} AND TO_DATE(rv_start_date,'yyyy/mm/dd') < #{check_out})
				]]>
			</if>
			<if test="search != ''">
				AND price.acc_address1 LIKE '%' || #{search} || '%' 
			</if>
			<if test="search != ''">
				OR price.acc_name LIKE '%' || #{search} || '%' 
			</if>
			<if test="search == '호텔'">
				OR price.ro_sub = 'h'
			</if>
			<if test="search == '하우스' or search == '프라이빗하우스' or search == '게스트하우스'">
				OR price.ro_sub = 'p'
			</if>
			<if test="orderby == 'rating'">
				ORDER BY grade.ag_grade DESC
			</if>
			<if test="orderby == 'recommend' or orderby == 'relax' or orderby == 'luxury' or orderby == 'business' or orderby == 'party'">
				ORDER BY price.ro_price ASC
			</if>
			<if test="orderby == 'hotelGrade'">
				ORDER BY price.acc_grade DESC
			</if>
		</where>
			<if test="orderby == 'minimum'">
				ORDER BY price.ro_price ASC
			</if>
			<if test="orderby == 'init'">
				
			</if>
	</select>
	
	<select id="selectImage" parameterType="Integer" resultType="ImageCommand">
	SELECT img.im_ac_num, img.im_cover, img.im_cover_name, img.im_image2,
	img.im_image2_name FROM
	(SELECT im_ac_num,im_ro_num,im_cover,im_cover_name,im_image2,im_image2_name
	FROM accom_image)img RIGHT OUTER JOIN
	(SELECT * FROM (SELECT ROW_NUMBER() OVER(PARTITION BY ro_acc_num ORDER BY
	MIN(ro_price)) row_num, ro_acc_num, MIN(ro_price) ro_price, ro_num,
	ro_sub, ro_pe_count FROM accom_room
	GROUP BY ro_acc_num, ro_num, ro_sub, ro_pe_count) WHERE row_num = 1)room_num
	ON img.im_ro_num = room_num.ro_num WHERE img.im_ac_num=#{im_ac_num}
	</select>
	
	<!-- 메인 페이지에서 추천 숙소(슈퍼호스트) 리스트 -->
	<select id="selectRecommendList" parameterType="map" resultType="AccomCommand">
	SELECT price.*, auth.member_auth, service.se_name, grade.ag_grade,
	review.review_count, book.rv_start_date, book.rv_end_date FROM (SELECT
	* FROM ((SELECT * FROM accom)a) JOIN
	(SELECT * FROM (SELECT ROW_NUMBER() OVER(PARTITION BY ro_acc_num ORDER BY
	MIN(ro_price)) row_num, ro_acc_num, MIN(ro_price) ro_price, ro_num,
	ro_sub, ro_pe_count FROM accom_room
	GROUP BY ro_acc_num, ro_num, ro_sub, ro_pe_count) WHERE row_num = 1)b ON
	a.acc_num = b.ro_acc_num ORDER BY b.ro_price)price RIGHT OUTER JOIN
	(SELECT member_auth, member_email FROM member_auth WHERE member_auth >=
	2)auth ON price.acc_host = auth.member_email RIGHT OUTER JOIN
	(SELECT se_acc_num, se_name FROM accom_service)service ON price.acc_num =
	service.se_acc_num LEFT OUTER JOIN
	(SELECT a.*, b.ag_grade FROM ((SELECT * FROM accom)a) JOIN (SELECT ag_acc_num,
	ROUND(AVG(ag_grade), 1)ag_grade FROM accom_grade
	GROUP BY ag_acc_num)b ON a.acc_num = b.ag_acc_num)grade ON price.acc_num =
	grade.acc_num LEFT OUTER JOIN
	(SELECT a.*, b.review_count FROM ((SELECT * FROM accom)a) JOIN (SELECT
	re_acc_num, COUNT(*)review_count FROM accom_review GROUP BY
	re_acc_num)b ON a.acc_num = b.re_acc_num)review
	ON grade.acc_num = review.acc_num LEFT OUTER JOIN (SELECT member_email,
	rv_start_date, rv_end_date FROM reservation WHERE rv_start_date IS
	NULL)book
	ON price.acc_host = book.member_email WHERE auth.MEMBER_AUTH = 3 ORDER BY price.ro_price ASC
	</select>
</mapper>
