<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 식별자라서 여러 개의 mapper를 만들었을 때 구별하기 위해 유니크 해야 함 -->
<mapper namespace="kr.spring.accom.dao.AccomMapper">
	<!-- 
	id : myBatis에서 제공하는 메소드가 받는 식별자로 DAO가 SQL문을 받을 수 있게 해준다.
		 단, 어노테이션 방식으로 myBatis가 설정되었을 경우 id와 메소드명이 일치하면 해당 메소드로 자동 인식
	parameterType : 인자로 전달되는 데이터의 타입
	resultType : 한 건의 데이터를 자바빈에 담는다. (List라고 명시하면 SQL문에 의해 데이터가 처리되기 전 상태라 객체가 비어있어서 예외 발생)
	-->
	<select id="selectList" parameterType="java.util.Map" resultType="AccomCommand">
		SELECT price.*, grade.ag_grade, auth.member_auth, service.se_name,
		review.review_count, book.rv_start_date, book.rv_end_date FROM
		(SELECT a.*, r.ro_price, r.ro_sub, r.ro_pe_count FROM accom a, accom_room r
		where a.acc_num = r.ro_acc_num ORDER BY r.ro_sub ASC)price RIGHT OUTER
		JOIN
		(SELECT a.*, m.member_auth, m.member_email FROM accom a, member_auth m where
		a.acc_host = m.member_email)auth ON price.acc_host = auth.member_email
		RIGHT OUTER JOIN
		(SELECT a.*, s.se_name FROM accom a, accom_service s WHERE a.acc_num =
		s.se_acc_num)service ON auth.acc_num = service.acc_num LEFT OUTER JOIN
		(SELECT * FROM ((SELECT * FROM accom)a) JOIN (SELECT ag_acc_num,
		ROUND(AVG(ag_grade), 1)ag_grade FROM accom_grade GROUP BY ag_acc_num)b
		ON a.acc_num = b.ag_acc_num)grade
		ON price.acc_num = grade.acc_num LEFT OUTER JOIN
		(SELECT * FROM ((SELECT * FROM accom)a) JOIN (SELECT re_acc_num,
		COUNT(*)review_count FROM accom_review GROUP BY re_acc_num)b ON
		a.acc_num = b.re_acc_num)review
		ON grade.ag_acc_num = review.re_acc_num LEFT OUTER JOIN (SELECT acc_num,
		rv_start_date, rv_end_date FROM reservation)book
		ON review.re_acc_num = book.acc_num
		<where>
			<!-- 
			orderby는 컨트롤러에서 메소드 파라미터명
			recommend, rating, minimum은 accomList페이지에서 option태그의 value값
			 -->
			<if test="orderby == 'rating'">
				grade.ag_grade is not null
			</if>
			<if test="orderby == 'recommend'">
				<![CDATA[
					auth.MEMBER_AUTH = 3
				]]>
			</if>
			<if test="orderby == 'hotelGrade'">
				<![CDATA[
					price.acc_grade >= 4
				]]>
			</if>
			<if test="orderby == 'relax'">
				price.acc_theme LIKE '%조용%' OR price.acc_theme LIKE '%편안%'
			</if>
			<if test="orderby == 'luxury'">
				price.acc_theme LIKE '%럭셔리%' 
			</if>
			<if test="orderby == 'business'">
				price.acc_theme LIKE '%비지니스%' 
			</if>
			<if test="orderby == 'party'">
				price.acc_theme LIKE '%파티%' 
			</if>
			<if test="check_in != '' and check_out != '' and orderby != ''">
				AND
			</if>
			<if test="check_in != '' and check_out != '' and people_count != '' and people_count >= 1">
				price.acc_num NOT IN (SELECT acc_num FROM reservation 
				<![CDATA[
					WHERE TO_DATE(rv_end_date,'yyyy/mm/dd') >= #{check_in} AND TO_DATE(rv_start_date,'yyyy/mm/dd') <= #{check_out} AND price.ro_pe_count >= 1 AND price.ro_pe_count <= 8
				]]>
				)
			</if>
			<if test="search != ''">
				AND price.acc_address1 LIKE '%' || #{search} || '%' 
			</if>
			<if test="search != ''">
				OR price.acc_name LIKE '%' || #{search} || '%' 
			</if>
			<if test="search == '호텔'">
				OR <![CDATA[price.ro_sub = 'h']]>
			</if>
			<if test="search == '하우스' or search == '프라이빗하우스' or search == '게스트하우스'">
				OR <![CDATA[price.ro_sub = 'p']]>
			</if>
			<if test="orderby == 'rating' or orderby == 'recommend' or orderby == 'relax' or orderby == 'luxury' or orderby == 'business' or orderby == 'party'">
				ORDER BY price.ro_price ASC
			</if>
			<if test="orderby == 'hotelGrade'">
				ORDER BY price.acc_grade DESC
			</if>
		</where>
			<if test="orderby == 'minimum'">
				ORDER BY price.ro_price ASC
			</if>
	</select>
</mapper>
